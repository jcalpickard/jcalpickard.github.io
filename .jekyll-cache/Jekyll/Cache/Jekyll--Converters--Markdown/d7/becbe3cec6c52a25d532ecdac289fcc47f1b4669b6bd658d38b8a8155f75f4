I"<<h1>Graph</h1>

<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
  <style>
    #network {
      width: 100%;
      height: 400px;
      border: 1px solid lightgray;
    }
    .graph-tooltip {
      position: absolute;
      background-color: white;
      border: 1px solid black;
      padding: 5px;
      display: none;
      z-index: 1000;
    }
  </style>
</head>
<body>
<div id="network" style="width: 100%; height: 400px;"></div>
<div id="tooltip" class="graph-tooltip" style="display: none; position: absolute; background: #fff; border: 1px solid #ccc; padding: 10px; z-index: 1000;"></div>

<script type="text/javascript">
  fetch('/assets/graph-data.json')
  .then(response => response.json())
  .then(data => {
    const container = document.getElementById('network');
    const stages = {
      bruck: { color: '#8C8C7E', size: 10, borderWidth: 0 },
      tinkering: { color: '#7E7E6E', size: 15, borderWidth: 0 },
      roughingOut: { color: '#6D6D5E', size: 15, borderWidth: 0 },
      moulding: { color: '#5E5E4E', size: 20, borderWidth: 0 },
      detailing: { color: '#4E4E3E', size: 20, borderWidth: 0 }
    };

    data.nodes.forEach(node => {
      const stage = stages[node.stage];
      if (stage) {
        node.color = stage.color;
        node.size = stage.size;
        node.borderWidth = stage.borderWidth;
        node.title = `<div>
                        <strong>${node.label}</strong>
                        <p>Stage: ${node.stage}</p>
                        <p>Tags: ${node.tags.join(', ')}</p>
                      </div>`;
      }
    });

      // Convert links to edges
      const edges = data.links.map(link => ({
        from: link.source,
        to: link.target
      }));

      const networkData = {
        nodes: data.nodes,
        edges: edges
      };

      const options = {
        nodes: {
          shape: 'dot',
          font: {
            size: 15,
            color: '#000000'
          }
        },
        edges: {
          width: 2
        },
        layout: {
          hierarchical: false
          },
        physics: {
          enabled: true
        }
      };

        // interaction: {
        //  hover: true,
        //  navigationButtons: true,
        //  keyboard: true,
        //  tooltipDelay: 300
        // }

      const network = new vis.Network(container, networkData, options);

      // var tooltip = document.createElement("div");
      //  tooltip.className = "graph-tooltip";
      //  document.body.appendChild(tooltip);

      network.on("hoverNode", function (params) {
        const nodeId = params.node;
        const nodeData = data.nodes.find(node => node.id === nodeId);
        tooltip.innerHTML = nodeData.title;
        tooltip.style.display = "block";
        tooltip.style.left = params.event.pageX + "px";
        tooltip.style.top = params.event.pageY + "px";
      });

      network.on("blurNode", function () {
        tooltip.style.display = "none";
      });

      network.on('click', (params) => {
        if (params.nodes.length === 1) {
          const nodeId = params.nodes[0];
          const node = data.nodes.find(node => node.id === nodeId);
          if (node && node.url) {
            setTimeout(() => {
              window.location.href = node.url;
            }, 300);
          }
        }
      });
    })
    .catch(error => {
      console.error('There has been a problem with your fetch operation:', error);
      // Handle the error, e.g., display an error message to the user
      const container = document.getElementById('network');
      container.innerHTML = 'Error loading the network graph. Please try again later.';
    });
  </script>
</body>

That was a graph.
</html>
:ET